{-# LANGUAGE FlexibleContexts     #-}
{-# LANGUAGE FlexibleInstances    #-}
{-# LANGUAGE NoImplicitPrelude    #-}
{-# LANGUAGE OverloadedStrings    #-}
{-# LANGUAGE ScopedTypeVariables  #-}
{-# LANGUAGE TemplateHaskell      #-}
{-# LANGUAGE TypeSynonymInstances #-}
{-# LANGUAGE UnicodeSyntax        #-}
{-# LANGUAGE ViewPatterns         #-}

{- | Format Text or Strings, in a type-safe way, using Quasi Quotations.

    @
    import Text.Fmt   ( fmt )
    import Data.Text  ( pack )

    -- fmt produces Text or String per type inference
    [fmt|This is some %t|] (pack "text") == "This is some text"
    @

    A module to provide type-safe printf-alike functionality in Haskell.  __Note
    that both the QuasiQuotes and OverloadedStrings extensions are necessary in
    practice__, frankly I'm not sure why OverloadedStrings is.  Without it, you
    may get errors a bit like this:

    @
      ‚Ä¢ Couldn't match expected type ‚ÄòFormat (Integer ‚Üí Text) (Int ‚Üí t)‚Äô
                  with actual type ‚Äò[Char]‚Äô
      ‚Ä¢ In the first argument of ‚Äò(%)‚Äô, namely
    @
 -}

module Text.Fmt
  ( -- * Format Specifiers

    -- $formatting

    ByteFmtBase(..), FormatTarget(..), ToUTCTimeY( toUTCTimeY )
  , fmt, fmtS, fmtL, fmtT, formatBytes, formatUTCY, formatUTCYDoW
  -- for testing only
  , Token(..), conversion, fill, sprintf, tokens )
where

import Prelude ( Double, Int, Integer, Integral, Real, RealFloat
               , (+), (-), (/), (^), (**)
               , abs, decodeFloat, error, floor, fromIntegral, toInteger
               )

-- base --------------------------------

import Control.Applicative  ( many )
import Data.Bool            ( otherwise )
import Data.Char            ( Char, toUpper )
import Data.Either          ( Either( Left, Right ) )
import Data.Eq              ( Eq )
import Data.Foldable        ( Foldable, foldr, toList )
import Data.Function        ( ($), const, id )
import Data.Functor         ( fmap )
import Data.List            ( concat, elem, intercalate )
import Data.Maybe           ( Maybe( Just, Nothing ) )
import Data.Ord             ( (<), (>) )
import Data.Word            ( Word8 )
import GHC.Stack            ( SrcLoc
                            , getCallStack, srcLocFile, srcLocModule
                            , srcLocPackage, srcLocEndCol, srcLocEndLine
                            , srcLocStartCol, srcLocStartLine
                            )
import Numeric              ( logBase )
import Numeric.Natural      ( Natural )
import Text.Read            ( read )
import Text.Show            ( Show( show ) )

-- base-unicode-symbols ----------------

import Data.Eq.Unicode        ( (‚â°) )
import Data.Function.Unicode  ( (‚àò) )
import Data.Monoid.Unicode    ( (‚äï) )

-- data-textual ------------------------

import Data.Textual  ( Printable, toString, toText )

-- formatting --------------------------

import qualified  Formatting.Formatters  as  Formatters

import Formatting             ( Format, (%), (%.)
                              , format, formatToString, later, mapf, sformat )
import Formatting.Formatters  ( bin, fixed, hex, int, oct, shortest, shown
                              , stext, text )

-- has-callstack -----------------------

import HasCallstack  ( HasCallstack( callstack ) )

-- lens --------------------------------

import Control.Lens  ( view )

-- more-unicode ------------------------

import Data.MoreUnicode.Applicative  ( (‚à§), (‚ã™), (‚ã´), (‚äµ) )
import Data.MoreUnicode.Functor      ( (‚ä≥) )
import Data.MoreUnicode.Lens         ( (‚ä£) )
import Data.MoreUnicode.Maybe        ( ùïÑ )
import Data.MoreUnicode.Monoid       ( —é )
import Data.MoreUnicode.String       ( ùïä )
import Data.MoreUnicode.Text         ( ùïã )

-- number ------------------------------

import Number  ( ToNum( toNumI ) )

-- parsec ------------------------------

import Text.Parsec.Char        ( char, digit, noneOf, oneOf, string )
import Text.Parsec.Combinator  ( eof, many1, option, optionMaybe )
import Text.Parsec.Error       ( ParseError )
import Text.Parsec.Prim        ( (<?>), parse, try )

-- parsec-plus-base --------------------

import ParsecPlusBase  ( Parser, boundedDoubledChars )

-- process -----------------------------

import System.Process.Internals  ( translate )

-- template-haskell --------------------

import Language.Haskell.TH  ( ExpQ, Name, appE, charL, conE, infixE, integerL
                            , litE, stringL, varE )
import Language.Haskell.TH.Quote
                            ( QuasiQuoter( QuasiQuoter, quoteDec
                                         , quoteExp, quotePat, quoteType ) )

-- text --------------------------------

import qualified  Data.Text               as  Text
import qualified  Data.Text.Lazy          as  LazyText
import qualified  Data.Text.Lazy.Builder  as  LazyBuilder

import Data.Text  ( dropWhileEnd, pack, unpack )

-- text-format -------------------------

import Data.Text.Buildable  as  Buildable

-- time --------------------------------

import Data.Time.Clock   ( UTCTime )
import Data.Time.Format  ( defaultTimeLocale, formatTime )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import Text.Fmt.Token  ( Token( Conversion, Str ) )

-------------------------------------------------------------------------------

-- | tokenize a string into strings & conversions
tokens ‚à∑ ùïã ‚Üí Either ParseError [Token]
tokens s = concatTokens ‚ä≥ parse (tokenP ‚ã™ eof) (unpack s) s

----------------------------------------

-- | squish consecutive Str together

concatTokens ‚à∑ [Token] ‚Üí [Token]
concatTokens (Str s : Str s' : ts) = concatTokens (Str (s ‚äï s') : ts)
concatTokens (t : t' : ts)         = t : t' : ts
concatTokens ts                    = ts

----------------------------------------

-- | parse a string into tokens
tokenP ‚à∑ Parser [Token]
tokenP = many (simpleStr ‚à§ try escapePC ‚à§ try escapeSlash ‚à§ conversion)

----------------------------------------

{- | Parse a string into a conversion specifier. -}
conversion ‚à∑ Parser Token
conversion =
  Conversion ‚ä≥ (string "%" ‚ã´ optionMaybe fill)
             ‚äµ optionMaybe precision
             ‚äµ optionMaybe (pack ‚ä≥ boundedDoubledChars '{' '}')
             ‚äµ (oneOf "bdefIkKlLnoqQstTwxyYzZ" <?> "valid conversion char")

----------------------------------------

{- | Parser for the fill spec of a conversion (the -07 of "%-07.4s", for
     example). -}
fill ‚à∑ Parser (Integer, Char)
fill = (\ a b c d ‚Üí (read (concat [a,[c],d]), b)) ‚ä≥ option "" (string "-")
                                                  ‚äµ option ' ' (char '0')
                                                  ‚äµ oneOf "123456789"
                                                  ‚äµ many digit

----------------------------------------

-- | parse for the precision part of a conversion (.2 of "%3.2f", for example)

precision ‚à∑ Parser Natural
precision = read ‚ä≥ (char '.' ‚ã´ many digit)

----------------------------------------

-- | parser for an unadorned string (without any % chars)
simpleStr ‚à∑ Parser Token
simpleStr = Str ‚ä≥ many1 (noneOf "%\\")

----------------------------------------

-- | parser for an escaped '%' (represented in the incoming string as "%%")
escapePC ‚à∑ Parser Token
escapePC = Str ‚ä≥ const "%" ‚ä≥ string "%%"

----------------------------------------

-- | parser for slash escapes, e.g., \\, \n, \t
escapeSlash ‚à∑ Parser Token
escapeSlash = Str ‚àò decode ‚ä≥ (char '\\' ‚ã´ oneOf "nt\\")
              where decode 'n'  = "\n"
                    decode 't'  = "\t"
                    decode '\\' = "\\"
                    decode c    = error $ —é [ "bad decode char: '", [c], "'" ]

----------------------------------------

{- | whether to format a bytes value in terms of powers of 10^3, or 2^10 -}
data ByteFmtBase = B_1000 | B_1024
  deriving Eq

-- | try really hard to fit within 7 chars
formatBytes ‚à∑ (Formatters.Buildable a, Integral a) ‚áí ByteFmtBase ‚Üí a ‚Üí ùïã
formatBytes _ (toInteger ‚Üí 0) = "0"
formatBytes b bs =
    case b of
      B_1000 ‚Üí go 1000 bs -- (byteSize bs)
      B_1024 ‚Üí go 1024 bs -- (fromIntegral $ byteSize bs)
    where go ‚à∑ (Formatters.Buildable b, Integral b) ‚áí Double ‚Üí b ‚Üí ùïã
          go x bytes =
            let ex ‚à∑ Word8 = floor (logBase x $ fromIntegral bytes)
                (pfx,exp) ‚à∑ (ùïÑ Char, Word8)= case ex of
                              0 ‚Üí (Nothing,  0)
                              1 ‚Üí (Just 'k', 1)
                              2 ‚Üí (Just 'M', 2)
                              3 ‚Üí (Just 'G', 3)
                              4 ‚Üí (Just 'T', 4)
                              5 ‚Üí (Just 'P', 5)
                              6 ‚Üí (Just 'E', 6)
                              7 ‚Üí (Just 'Z', 7)
                              _ ‚Üí (Just 'Y', 8)
                formatB n = fixed n % Formatters.char % Formatters.string % "B"
                i = if b ‚â° B_1024 then "i" else ""
             in case pfx of
                 Nothing ‚Üí sformat (int % "B") bytes
                 Just c  ‚Üí let mant = fromIntegral bytes / (x^exp)
                               c_   = if b ‚â° B_1024 then toUpper c else c
                             in if mant < 10
                                then -- [fmt|%3.2f%T%sB|]
                                     sformat (formatB 2) mant c_ i
                                else if mant < 100
                                     then -- [fmt|%4.1f%T%sB|]
                                          sformat (formatB 1) mant (toUpper c) i
                                     else -- [fmt|%4f%T%sB|]
                                          sformat (formatB 0) mant (toUpper c) i

----------------------------------------

class ToUTCTimeY Œ± where
  toUTCTimeY ‚à∑ Œ± ‚Üí ùïÑ UTCTime

instance ToUTCTimeY UTCTime where
  toUTCTimeY = Just

instance ToUTCTimeY (ùïÑ UTCTime) where
  toUTCTimeY = id

{- | Format a (Maybe UTCTime), in almost-ISO8601-without-fractional-seconds
     (always in Zulu). -}
formatUTCY ‚à∑ ToUTCTimeY Œ± ‚áí Œ± ‚Üí ùïã
formatUTCY mt = case toUTCTimeY mt of
                  Just t  ‚Üí pack $ formatTime defaultTimeLocale "%FZ%T" t
                  Nothing ‚Üí "-------------------"

{- | Format a (Maybe UTCTime), in ISO8601-without-fractional-seconds (always in
     Zulu), with a leading 3-letter day-of-week. -}
formatUTCYDoW ‚à∑ ToUTCTimeY Œ± ‚áí Œ± ‚Üí ùïã
formatUTCYDoW mt = case toUTCTimeY mt of
                     Just t  ‚Üí pack $ formatTime defaultTimeLocale "%FZ%T %a" t
                     Nothing ‚Üí "-----------------------"

toFormatUTC ‚à∑ ToUTCTimeY Œ± ‚áí Format œÅ (Œ± ‚Üí œÅ)
toFormatUTC = later $ LazyBuilder.fromText ‚àò formatUTCY

toFormatUTCDoW ‚à∑ ToUTCTimeY Œ± ‚áí Format œÅ (Œ± ‚Üí œÅ)
toFormatUTCDoW = later $ LazyBuilder.fromText ‚àò formatUTCYDoW

----------------------------------------

renderStackLine ‚à∑ (ùïä,SrcLoc) ‚Üí ùïä
renderStackLine (fname,loc) = let to x y = x ‚äï "‚Üí" ‚äï y
                                  toS x y = to (show x) (show y)
                                  col l c = l ‚äï "[" ‚äï c ‚äï "]"
                                  colS l c = col (show l) (show c)
                                  pkg = srcLocPackage   loc
                                  mod = srcLocModule    loc
                                  fn  = srcLocFile      loc
                                  sc  = srcLocStartCol  loc
                                  sl  = srcLocStartLine loc
                                  ec  = srcLocEndCol    loc
                                  el  = srcLocEndLine   loc
                                  st  = colS sl sc
                                  ed  = colS el ec
                                  src = —é [ pkg, ":", mod, ":" ‚äï fn ]
                                  lc = if sl ‚â° el
                                       then —é [ col (show sl) (sc `toS` ec) ]
                                       else st `to` ed
                               in —é [ "¬´", fname, "¬ª", " (", src, "#", lc, ")" ]

----------------------------------------

formatStackHead ‚à∑ HasCallstack Œ± ‚áí Œ± ‚Üí ùïä
formatStackHead a = case getCallStack (a ‚ä£ callstack) of
                      []          ‚Üí "¬´NO STACK¬ª"
                      (loc:_) ‚Üí renderStackLine loc

toFormatStackHead ‚à∑ HasCallstack Œ± ‚áí Format œÅ (Œ± ‚Üí œÅ)
toFormatStackHead = later $ LazyBuilder.fromString ‚àò formatStackHead

----------------------------------------

formatCallStack ‚à∑ HasCallstack Œ± ‚áí Œ± ‚Üí ùïä
formatCallStack (getCallStack ‚àò view callstack ‚Üí ss) =
  case ss of
    [] ‚Üí "¬´NO STACK¬ª"
    _  ‚Üí intercalate "\n" $ renderStackLine ‚ä≥ ss

toFormatCallStack ‚à∑ HasCallstack Œ± ‚áí Format œÅ (Œ± ‚Üí œÅ)
toFormatCallStack = later $ LazyBuilder.fromString ‚àò formatCallStack

----------------------------------------

-- | parse a fmt, return an ExpQ that when spliced, takes arguments to pass
--   to the formatter to provide a textlike thing (see `FormatTarget`)
sprintf ‚à∑ ùïã ‚Üí ExpQ
sprintf = sprintf_ 'output

-- | like `sprintf`, but always produces a String (to reduce scoped type
--   variables)
sprintfS ‚à∑ ùïã ‚Üí ExpQ
sprintfS = sprintf_ 'formatToString

sprintfT ‚à∑ ùïã ‚Üí ExpQ
sprintfT = sprintf_ 'sformat

sprintfL ‚à∑ ùïã ‚Üí ExpQ
sprintfL = sprintf_ 'format

sprintf_ ‚à∑ Name ‚Üí ùïã ‚Üí ExpQ
sprintf_ fnam t =
  case tokens t of
    Left  e    ‚Üí error $ show e
    Right toks ‚Üí appE (varE fnam) $
                      foldr conjoin (litE $ stringL "") (fmap tokOp toks)
                  where conjoin = infixOp '(%)

{- | Implement a token.  Regular strings pass through; conversions ("%‚Ä¶") are
     implemented, and padded as necessary.
     Conversion token as formatter; e.g., %-3t ‚áí (left 3 ' ') %. stext
 -}
tokOp ‚à∑ Token ‚Üí ExpQ
-- literal string
tokOp (Str s)                         = litE $ stringL s
-- conversion, no padding
tokOp (Conversion Nothing p t c)      = charOp c Nothing p t
-- conversion, with padding
tokOp (Conversion (Just (width,fll)) prec txt convchar) =
  infixOp '(%.) (fillOp (width,fll)) (charOp convchar (Just width) prec txt)

----------------------------------------

-- create a fill expression
fillIt ‚à∑ Name ‚Üí Integer ‚Üí Char ‚Üí ExpQ
fillIt direction width chr =
  appE (appE (varE direction) (litE (integerL width))) (litE $ charL chr)

{- | Transform a `LazyText` transformer to a `Builder`. -}
buildLTTrans ‚à∑ Buildable œÅ ‚áí
               (LazyText.Text ‚Üí LazyText.Text) ‚Üí œÅ ‚Üí LazyBuilder.Builder
buildLTTrans f =
  LazyBuilder.fromLazyText ‚àò f ‚àò LazyBuilder.toLazyText ‚àò Buildable.build

buildLTFormatter ‚à∑ Buildable œÅ ‚áí
                   (LazyText.Text ‚Üí LazyText.Text) ‚Üí Format Œ± (œÅ ‚Üí Œ±)
buildLTFormatter = later ‚àò buildLTTrans

{- | Apply a text transformation to each line of a piece of text. -}
eachLine ‚à∑ Buildable œÅ ‚áí (LazyText.Text ‚Üí LazyText.Text) ‚Üí Format Œ± (œÅ ‚Üí Œ±)
eachLine f =
  -- we split & intercalate rather than lines/unlines, because the latter is
  -- lossy where the last "line" does or does not end in a newline
  buildLTFormatter $ LazyText.intercalate "\n" ‚àò fmap f ‚àò LazyText.split (‚â°'\n')

{- | Pad out each line to (to the left) a given width with a given character. -}
lefts ‚à∑ Buildable œÅ ‚áí Integer ‚Üí Char ‚Üí Format Œ± (œÅ ‚Üí Œ±)
lefts k c = eachLine (LazyText.justifyRight (fromIntegral k) c)

{- | Pad out each line to (to the right) a given width with a given character.-}
rights ‚à∑ Buildable œÅ ‚áí Integer ‚Üí Char ‚Üí Format Œ± (œÅ ‚Üí Œ±)
rights k c = eachLine (LazyText.justifyLeft (fromIntegral k) c)

-- | conversion fill; -x ‚Üí left, (+)x ‚Üí right

fillOp ‚à∑ (Integer,Char) ‚Üí ExpQ
fillOp (i,c) | i < 0     = fillIt 'rights (abs i) c
             | i > 0     = fillIt 'lefts       i  c
             | otherwise = -- i ‚â° 0 : something's gone wrong!
                           error "cannot fill with size 0"
----------------------------------------

toTextF ‚à∑ Printable t ‚áí Format r (t ‚Üí r)
toTextF = later $ LazyBuilder.fromText ‚àò toText

toTextListF ‚à∑ (Foldable f, Printable t) ‚áí Format r (f t ‚Üí r)
toTextListF =
  later $ LazyBuilder.fromText ‚àò Text.intercalate "," ‚àò fmap toText ‚àò toList

----------------------------------------

toShell ‚à∑ Printable t ‚áí Format r (t ‚Üí r)
toShell = later $ LazyBuilder.fromString ‚àò translate ‚àò toString

toShellList ‚à∑ (Foldable f, Printable t) ‚áí Format r (f t ‚Üí r)
toShellList =
  let quote = toText ‚àò translate ‚àò toString
   in later $ LazyBuilder.fromText ‚àò Text.intercalate " " ‚àò fmap quote ‚àò toList

----------------------------------------

toFormatBytes ‚à∑ (Formatters.Buildable a, Integral a) ‚áí
                ByteFmtBase ‚Üí Format r (a ‚Üí r)
toFormatBytes b = later $ LazyBuilder.fromText ‚àò formatBytes b

----------------------------------------

{- $formatting

   Each specfier may be preceded by an integer value to specify padding and
   justification.  A positive integer pads to the left (thus, justifies to the
   right; and a negative integer pads to the right (thus, justifies to the
   left).

   >>> [fmtT|[%3s]|] "a"
   "[  a]"

   >>> [fmtT|[%-3s]|] "a"
   "[a  ]"

   Where noted below, some specifiers also allow a precision (after a 'decimal
   point').

   [@L@] - A `Foldable` of things, where the things are instances of
           `Printable`, joined with ',', thus
           @ (`Foldable` œÜ, Printable œÑ) ‚áí œÜ intercalate "," (fmap toText œÑ) @

   [@l@] - LazyText `LazyText.Text`

   [@s@] - `String`

   [@t@] - StrictText `Text`

   [@T@] - `Printable` @ œÑ ‚áí toText œÑ @

   [@w@] - `Show` @ œâ ‚áí show œâ @

   [@d@] - `Integral` Œ± ‚áí render as denary

   [@n@] - `ToNum` Œ±    ‚áí render as denary

   [@x@] - `Integral` Œ± ‚áí render as hexadenary

   [@b@] - `Integral` Œ± ‚áí render as binary

   [@o@] - `Integral` Œ± ‚áí render as octal

   [@f@] - `Real` Œ± ‚áí Render as decimal with as many decimal places as
                       necessary.  Beware floating-point representation which
                       may give lengthy results.

   [@f.n@] - `Real` Œ± ‚áí Render as decimal with precisely /n/ decimal places.
                        Will round to the nearest decimal place as appropriate.

   [@e@] - `Real` Œ± ‚áí Render as decimal in scientific notation with 0 decimal
                       places in the mantissa.

                       >>> [fmtT|[%-e]|] (3.14 ‚à∑ Float)
                       "[3e0]"

                       Note that the padding width, if provided, applies to the
                       whole representation; thus the below adds one space
                       because "3e-1" is 4 characters.

                       >>> [fmtT|[%5e]|] (0.314 ‚à∑ Float)
                       "[ 3e-1]"


   [@e.n@] - `Real` Œ± ‚áí Render as decimal in scientific notation with precisely
                         /n/ decimal places in the mantissa.

                         >>> [fmtT|[%-.1e]|] (0.314 ‚à∑ Float)
                         "[3.1e-1]"

   [@y@] - `Integral` Œ± ‚áí Render as bytes, with a 2^10 multiplier.  This tries
                           to fit the value into 7 characters.

                           >>> [fmtT|%y|] (1024^(2‚à∑Int) ‚à∑ Integer)
                           "1.05MB"

                           >>> [fmtT|%y|] (1024 ‚à∑ Integer)
                           "1.02kB"

                           >>> [fmtT|%y|] (999 ‚à∑ Integer)
                           "999B"


   [@Y@] - `Integral` Œ± ‚áí Render as bytes, with a 2^10 multiplier.  This tries
                           to fit the value into 7 characters.

                           >>> [fmtT|%Y|] (999 ‚à∑ Integer)
                           "999B"

                           >>> [fmtT|%Y|] (1024*1023 ‚à∑ Integer)
                           "1023KiB"

                           >>> [fmtT|%Y|] (1024*1024 ‚à∑ Integer)
                           "1.00MiB"

   [@z@] - `UTCTime` Œ± or `Maybe UTCTime` Œ± ‚áí Render as UTCTime, in the form
                                              "YYYY-MM-DDZhh:mm:ss".
                           >>> getCurrentTime >>= return . [fmtT|%z|]
                           "2020-04-20Z05:58:47"

   [@Z@] - `UTCTime` Œ± or `Maybe UTCTime` Œ± ‚áí Render as UTCTime, in the form
                                              "YYYY-MM-DDZhh:mm:ss www" where
                                              www is three-letter day-of-week.
                           >>> getCurrentTime >>= return . [fmtT|%Z|]
                           "2020-04-20Z05:58:47 Mon"

   [@k@] - `ToCallStack` Œ± ‚áí Render the top line of a callstack.

   [@K@] - `ToCallStack` Œ± ‚áí Render a callstack *as multiple lines*.  Note
                             that the behaviour of basic numeric fills with
                             multiple lines is undefined; you might want to use
                             a `{‚Ä¶}` clause here to provide indenting.

   [@q@] - `Printable` @ œÑ ‚áí `translate` t @; shell-quote string.
   [@Q@] - A `Foldable` of things, where the things are instances of
           `Printable`, which are shell-quoted like @q@, and joined with ' '.
-}

{- | Character op: non-Nothing precision causes error. -}
charOpNoPrecision ‚à∑ ExpQ ‚Üí Char ‚Üí ùïÑ Natural ‚Üí ùïÑ ùïã ‚Üí ExpQ
charOpNoPrecision f _ Nothing Nothing = f
charOpNoPrecision _ chr (Just prec) Nothing =
  error $ —é [ "conversion char '", [chr], "' does not admit precision ("
            , show prec, ")" ]
charOpNoPrecision _ chr Nothing (Just t) =
  error $ —é [ "conversion char '", [chr], "' admits no text ({", unpack t,"})" ]
charOpNoPrecision _ chr (Just prec) (Just t) =
  error $ —é [ "conversion char '", [chr], "' admits neither precision ("
            , show prec, ")", " nor text ({", unpack t
            , "})" ]

{- | Conversion character as formatter; e.g., 't' ‚Üí stext; takes fill width &
     precision too, lest that affect the conversion. -}
charOp ‚à∑ Char          -- ^ conversion character (typically for errmsgs)
       ‚Üí ùïÑ Integer -- ^ fill width
       ‚Üí ùïÑ Natural -- ^ precision
       ‚Üí ùïÑ ùïã    -- ^ optional text (between {}) (unused in charOp)
       ‚Üí ExpQ

-- list (foldable), joined with ','
charOp c@'L' _ p t = charOpNoPrecision (varE 'toTextListF) c p t
-- lazy text
charOp c@'l' _ p t = charOpNoPrecision (varE 'text) c p t
charOp c@'s' _ p t = charOpNoPrecision (varE 'Formatters.string) c p t
charOp c@'t' _ p t = charOpNoPrecision (varE 'stext) c p t
charOp c@'T' _ p t = charOpNoPrecision (varE 'toTextF) c p t
charOp c@'q' _ p t = charOpNoPrecision (varE 'toShell) c p t
charOp c@'w' _ p t = charOpNoPrecision (varE 'shown) c p t

-- list (foldable) of shell-quoted things, joined with ' '
charOp c@'Q' _ p t = charOpNoPrecision (varE 'toShellList) c p t


charOp c@'d' _ p t = charOpNoPrecision (varE 'int) c p t
charOp c@'x' _ p t = charOpNoPrecision (varE 'hex) c p t
charOp c@'b' _ p t = charOpNoPrecision (varE 'bin) c p t
charOp c@'o' _ p t = charOpNoPrecision (varE 'oct) c p t
charOp c@'n' _ p t = charOpNoPrecision (varE 'tonum) c p t

charOp 'f' _ _ (Just t) =
  error $ "conversion char 'f' admits no text ({" ‚äï unpack t ‚äï "})"
charOp 'f' _ Nothing  Nothing = varE 'floatmin
charOp 'f' _ (Just i) Nothing =
  appE (varE 'fixed) (litE (integerL $ fromIntegral i))
charOp 'e' _ Nothing  Nothing = appE (varE 'expt) (litE (integerL 0))
charOp 'e' _ (Just i) Nothing = appE
  (varE 'expt) (litE (integerL $ fromIntegral i))

charOp c@'y' _ p t =
  charOpNoPrecision (appE (varE 'toFormatBytes) (conE 'B_1000)) c p t
charOp c@'Y' _ p t =
  charOpNoPrecision (appE (varE 'toFormatBytes) (conE 'B_1024)) c p t

charOp c@'z' _ p t = charOpNoPrecision (varE 'toFormatUTC) c p t
charOp c@'Z' _ p t = charOpNoPrecision (varE 'toFormatUTCDoW) c p t

charOp c@'k' _ p t = charOpNoPrecision (varE 'toFormatStackHead) c p t
charOp c@'K' _ p t = charOpNoPrecision (varE 'toFormatCallStack) c p t

charOp x _ _ _ = error $ "bad conversion char'" ‚äï [x] ‚äï "'"

floatmin ‚à∑ Real Œ± ‚áí Format r (Œ± ‚Üí r)
floatmin = let dropper = dropWhileEnd (`elem` (".0" ‚à∑ ùïä))
            in later $ LazyBuilder.fromText ‚àò dropper ‚àò sformat shortest

tonum ‚à∑ ToNum Œ± ‚áí Format r (Œ± ‚Üí r)
tonum = mapf toNumI int

expt ‚à∑  RealFloat Œ± ‚áí Int ‚Üí Format r (Œ± ‚Üí r)
expt i = later (\ f ‚Üí
  let (m,e ‚à∑ Integer) = decompose f
   in LazyBuilder.fromText $ (sformat $ (fixed i % "e" % int)) m e)


-- | decompose a Real value into "engineering" notation; a mantissa between
--   (-10,10) and an exponent, as a power of 10
decompose ‚à∑ (RealFloat Œ±, Integral Œ≤) ‚áí Œ± ‚Üí (Double, Œ≤)
decompose val = let (mant2,ex2) = decodeFloat val
                    mant2d ‚à∑ Double = fromIntegral(abs mant2)
                    ex2d   ‚à∑ Double = fromIntegral ex2
                    res    ‚à∑ Double = log10 mant2d + log10 (2**ex2d)
                    ex10             = floor res
                    log10  ‚à∑ Double ‚Üí Double = logBase 10
                    mant10 ‚à∑ Double = 10**(res - (fromIntegral ex10‚à∑Double))
                 in if mant2 > 0
                    then (mant10,ex10)
                    else (-mant10,ex10)

----------------------------------------

-- | infix a function between two values
infixOp ‚à∑ Name ‚Üí ExpQ ‚Üí ExpQ ‚Üí ExpQ
infixOp op l r = infixE (Just l) (varE op) (Just r)

----------------------------------------

-- | Generate an instance of FormatTarget (e.g., Strict or Lazy Text, or String)
--   from a format and set of values.
--
--   >>> ([fmt|foo %s|] ("baz" ‚à∑ String)) ‚à∑ Text
--   "foo baz"
--
--   >>> :t [fmtS|bar %t|] ("quux" ‚à∑ Text)
--   [fmtS|bar %t|] ("quux" ‚à∑ Text) ‚à∑ [Char]
--
--   >>> [fmtS|bar %t|] ("quux" ‚à∑ Text)
--  "bar quux"

fmt ‚à∑ QuasiQuoter
fmt =  QuasiQuoter { quoteDec  = error "not implemented"
                   , quoteType = error "not implemented"
                   , quotePat  = error "not implemented"
                   , quoteExp  = sprintf ‚àò pack
                   }

--------------------

-- | like `fmt`, but produces specifically a String
fmtS ‚à∑ QuasiQuoter
fmtS =  QuasiQuoter { quoteDec  = error "not implemented"
                    , quoteType = error "not implemented"
                    , quotePat  = error "not implemented"
                    , quoteExp  = sprintfS ‚àò pack
                    }

--------------------

-- | like `fmt`, but produces specifically a Lazy Text
fmtL ‚à∑ QuasiQuoter
fmtL =  QuasiQuoter { quoteDec  = error "not implemented"
                    , quoteType = error "not implemented"
                    , quotePat  = error "not implemented"
                    , quoteExp  = sprintfL ‚àò pack
                    }

--------------------

-- | like `fmt`, but produces specifically a Strict Text
fmtT ‚à∑ QuasiQuoter
fmtT =  QuasiQuoter { quoteDec  = error "not implemented"
                    , quoteType = error "not implemented"
                    , quotePat  = error "not implemented"
                    , quoteExp  = sprintfT ‚àò pack
                    }

------------------------------------------------------------

-- | possible target of `fmt` or similar.

class FormatTarget t where
  output ‚à∑ Format t a ‚Üí a

instance FormatTarget ùïã where
  output = sformat

instance FormatTarget LazyText.Text where
  output = format

instance FormatTarget ùïä where
  output = formatToString

-- that's all, folks! ---------------------------------------------------------

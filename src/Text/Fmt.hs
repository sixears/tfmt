{-# LANGUAGE UnicodeSyntax #-}
{- | Format Text or Strings, in a type-safe way, using Quasi Quotations.

    @
    import Text.Fmt   ( fmt )
    import Data.Text  ( pack )

    -- fmt produces Text or String per type inference
    [fmt|This is some %t|] (pack "text") == "This is some text"
    @

    A module to provide type-safe printf-alike functionality in Haskell.  __Note
    that both the QuasiQuotes and OverloadedStrings extensions are necessary in
    practice__, frankly I'm not sure why OverloadedStrings is.  Without it, you
    may get errors a bit like this:

    @
      ‚Ä¢ Couldn't match expected type ‚ÄòFormat (Integer ‚Üí Text) (Int ‚Üí t)‚Äô
                  with actual type ‚Äò[Char]‚Äô
      ‚Ä¢ In the first argument of ‚Äò(%)‚Äô, namely
    @
 -}

module Text.Fmt
  ( ByteFmtBase(..)
  , FormatTarget(..)
  , Justify(..)
  , ToUTCTimeY(toUTCTimeY)
  , columnify
  , commify
  , commifyR
  , fmt
  , fmtL
  , fmtS
  , fmtT
  , formatBytes
  , formatUTCY
  , formatUTCYDoW
    -- for testing only
  , Token(..)
  , conversion
  , fill
  , sprintf
  , tokens
  ) where

import Base0T qualified

import Base0T  hiding ( abs, (√∑) )
import Prelude ( Double, Integral, Num, Real, RealFloat, decodeFloat, divMod,
                 error, floor, toRational, (*), (**), (/), (^) )

-- base --------------------------------

import Data.Ratio qualified

import Data.Char     ( isDigit, toUpper )
import Data.Foldable ( Foldable )
import Data.List     ( concat, elem, intercalate, repeat, reverse, transpose,
                       zip, zipWith )
import Data.Maybe    ( fromMaybe )
import Data.Ratio    ( Ratio, denominator, numerator )
import GHC.Stack     ( SrcLoc, getCallStack, srcLocEndCol, srcLocEndLine,
                       srcLocFile, srcLocModule, srcLocPackage, srcLocStartCol,
                       srcLocStartLine )
import Numeric       ( logBase )
import Text.Read     ( read )

-- base-unicode-symbols ----------------

import Prelude.Unicode ( (√ó) )

-- containers --------------------------

import Data.Map.Lazy qualified as Map

-- formatting --------------------------

import Formatting.Formatters qualified as Formatters

import Formatting            ( Format, format, formatToString, later, mapf,
                               sformat, (%), (%.) )
import Formatting.Formatters ( bin, hex, int, oct, shortest, shown, stext,
                               text )

-- has-callstack -----------------------

import HasCallstack ( HasCallstack(callstack) )

-- lens --------------------------------

import Control.Lens.Each   ( each )
import Control.Lens.Fold   ( (^..) )
import Control.Lens.Getter ( view )

-- more-unicode ------------------------

import Data.MoreUnicode.Applicative ( (‚à§), (‚äµ), (‚ã™), (‚ã´) )
import Data.MoreUnicode.Bool        ( pattern ùï±, pattern ùïø )
import Data.MoreUnicode.Char        ( ‚ÑÇ )
import Data.MoreUnicode.Functor     ( (‚ä≥) )
import Data.MoreUnicode.Lens        ( (‚ä£), (‚äß) )
import Data.MoreUnicode.Maybe       ( ùïÑ, pattern ùïµ, pattern ùïπ )
import Data.MoreUnicode.Monoid      ( —Ñ, —é )
import Data.MoreUnicode.Semigroup   ( (‚óá) )
import Data.MoreUnicode.String      ( ùïä )
import Data.MoreUnicode.Text        ( ùïã )

-- natural -----------------------------

import Natural ( NumSign(SignMinus, SignPlus), length, replicate, unNegate,
                 (‚äñ) )

-- number ------------------------------

import Number ( ToNum(toNumI) )

-- parsers -----------------------------

import Text.Parser.Char        ( CharParsing, char, digit, noneOf, oneOf,
                                 string )
import Text.Parser.Combinators ( Parsing, between, choice, eof, option,
                                 optional, try, (<?>) )

-- process -----------------------------

import System.Process.Internals ( translate )

-- safe --------------------------------

import Safe ( maximumDef )

-- template-haskell --------------------

import Language.Haskell.TH       ( ExpQ, Name, appE, charL, infixE, litE,
                                   stringL, varE )
import Language.Haskell.TH.Quote ( QuasiQuoter(QuasiQuoter, quoteDec, quoteExp, quotePat, quoteType) )

-- text --------------------------------

import Data.Text              qualified as Text
import Data.Text.Lazy         qualified as LT
import Data.Text.Lazy.Builder qualified as LazyBuilder

import Data.Text ( dropWhileEnd, pack, unpack )

-- text-format -------------------------

import Data.Text.Buildable as Buildable

-- time --------------------------------

import Data.Time.Clock  ( UTCTime )
import Data.Time.Format ( defaultTimeLocale, formatTime )

-- trifecta ----------------------------

import Text.Trifecta.Parser ( parseString )
import Text.Trifecta.Result ( Result(Failure, Success) )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import Text.Fmt.Token ( Modifier(MOD_COLON, MOD_COMMIFY, MOD_NONE),
                        Token(Conversion, Str) )

-------------------------------------------------------------------------------

-- size, including impl. for Map, returning ‚Ñï
-- ‚àà, including for Map & Set
-- check Lens, incl. Control.Lens.At

type RatioN = Ratio ‚Ñï

(√∑) ‚à∑ ‚Ñï ‚Üí ‚Ñï ‚Üí RatioN
(√∑) = (Data.Ratio.%)

abs ‚à∑ ‚Ñ§ ‚Üí ‚Ñï
abs = fromIntegral ‚àò Base0T.abs

toRatioN ‚à∑ Real Œ± ‚áí Œ± ‚Üí (NumSign, RatioN)
toRatioN (toRational ‚Üí a) =
  let num = numerator a
      den = denominator a
      sign = if (num < 0) ‚â¢ (den < 0) then SignMinus else SignPlus
  in  (sign, (abs num) √∑ (abs den))

fixed ‚à∑ Real Œ± ‚áí ‚Ñï ‚Üí Format Œ≤ (Œ± ‚Üí Œ≤)
fixed n = Formatters.fixed (fromIntegral n)

instance Eq NumSign where
  SignMinus == SignMinus = ùïø
  SignPlus  == SignPlus  = ùïø
  _         == _         = ùï±

------------------------------------------------------------

-- Copied from ParserPlus; to avoid circular import involving
-- non-empty-containers

betweenCs ‚à∑ CharParsing Œ∑ ‚áí ‚ÑÇ ‚Üí ‚ÑÇ ‚Üí Œ∑ Œ± ‚Üí Œ∑ Œ±
betweenCs l r = between (char l) (char r)

doubledChar ‚à∑ CharParsing Œ∑ ‚áí [‚ÑÇ] ‚Üí Œ∑ ‚ÑÇ
doubledChar cs = (choice $ (\ c ‚Üí char c ‚ã´ char c) ‚ä≥ cs) ‚à§ noneOf cs

doubledChars ‚à∑ CharParsing Œ∑ ‚áí [‚ÑÇ] ‚Üí Œ∑ ùïä
doubledChars cs = many (try $ doubledChar cs)

boundedDoubledChars ‚à∑ CharParsing Œ∑ ‚áí ‚ÑÇ ‚Üí ‚ÑÇ ‚Üí Œ∑ ùïä
boundedDoubledChars l r = betweenCs l r (doubledChars [l,r])

------------------------------------------------------------

(‚©ª) ‚à∑ Parsing Œ∑ ‚áí Œ∑ Œ± ‚Üí ùïä ‚Üí Œ∑ Œ±
(‚©ª) = (<?>)

tokens ‚à∑ ùïã ‚Üí Result [Token]
tokens s = concatTokens ‚ä≥ parseString (tokenP ‚ã™ eof) —Ñ (unpack s)

----------------------------------------

-- | squish consecutive Str together

concatTokens ‚à∑ [Token] ‚Üí [Token]
concatTokens (Str s : Str s' : ts) = concatTokens (Str (s ‚äï s') : ts)
concatTokens (t : t' : ts)         = t : t' : ts
concatTokens ts                    = ts

----------------------------------------

-- | parse a string into tokens
tokenP ‚à∑ CharParsing Œ∑ ‚áí Œ∑ [Token]
tokenP = many (simpleStr ‚à§ try escapePC ‚à§ try escapeSlash ‚à§ conversion)
         where -- | parser for an unadorned string (without any % chars)
               simpleStr ‚à∑ CharParsing Œ∑ ‚áí Œ∑ Token
               simpleStr = Str ‚ä≥ some (noneOf "%\\")

               -- | parser for an escaped '%' (represented in the incoming
               --   string as "%%")
               escapePC ‚à∑ CharParsing Œ∑ ‚áí Œ∑ Token
               escapePC = Str ‚ä≥ const "%" ‚ä≥ string "%%"

               -- | parser for slash escapes, e.g., \\, \n, \t
               escapeSlash ‚à∑ CharParsing Œ∑ ‚áí Œ∑ Token
               escapeSlash = Str ‚àò decode ‚ä≥ (char '\\' ‚ã´ oneOf "nt\\")
                             where decode 'n'  = "\n"
                                   decode 't'  = "\t"
                                   decode '\\' = "\\"
                                   decode c    =
                                     error $ —é [ "bad decode char: '",[c],"'" ]

-- | parse a string into a conversion specifier
conversion ‚à∑ CharParsing Œ∑ ‚áí Œ∑ Token
conversion =
  Conversion ‚ä≥ (string "%"
                  ‚ã´ option MOD_NONE ((char ',' ‚ã´ pure MOD_COMMIFY) ‚à§
                                     (char ':' ‚ã´ pure MOD_COLON)))
             ‚äµ optional fill
             ‚äµ optional precision
             ‚äµ optional (pack ‚ä≥ boundedDoubledChars '{' '}')
             ‚äµ (oneOf "bdefIkKlLmnoqQstTwxyYzZ" ‚©ª "valid conversion char")

----------------------------------------

{-| Split a RatioN into hours, minutes, seconds, part -}
hmsp ‚à∑ RatioN ‚Üí (‚Ñï,‚Ñï,‚Ñï,RatioN)
hmsp secs =
  let num = numerator secs
      den = denominator secs

      (hh,m)  ‚à∑ (‚Ñï,‚Ñï)  = num `divMod` (den √ó 3600)
      (mm,s)  ‚à∑ (‚Ñï,‚Ñï)  = m `divMod` (den √ó 60)
      (ss,p)  ‚à∑ (‚Ñï,‚Ñï)  = s `divMod` den
  in  (hh,mm,ss, p √∑ den)

fmtTime_ ‚à∑ (Show Œ±, Real Œ±) ‚áí Modifier ‚Üí ùïÑ ‚Ñï ‚Üí Œ± ‚Üí ùïã
fmtTime_ mod_ prec (toRatioN ‚Üí (sign,secs)) | sign ‚â° SignMinus =
                                              "-" ‚óá fmtTime_ mod_ prec secs
                                            | otherwise     =
  let (hh,mm,ss,part) = hmsp secs

      colon ‚à∑ ‚ÑÇ ‚Üí ùïä
      colon c = case (mod_,c) of
                  (MOD_COLON, 's') ‚Üí ""
                  (MOD_COLON, _  ) ‚Üí [':']
                  (_        , _  ) ‚Üí [c]

      {-| a "0" if input < 10 -}
      p0_10 ‚à∑ (Ord Œ±, Num Œ±) ‚áí Œ± ‚Üí ùïä
      p0_10 x | x < 10    = "0"
              | otherwise = ""

      {-| show ‚Ñï, then a character - or colon iff `mod_` ‚â° MOD_COLON -}
      show_ ‚à∑ Show Œ± ‚áí Œ± ‚Üí ‚ÑÇ ‚Üí ùïä
      show_ i chr = show i ‚óá colon chr

      {-| like `show_`, but prefix with '0' if required to make a 2-digit num -}
      show2 ‚à∑ (Show Œ±, Ord Œ±, Num Œ±) ‚áí Œ± ‚Üí ‚ÑÇ ‚Üí ùïä
      show2 i c = p0_10 i ‚óá show_ i c

      showS ‚à∑ RatioN ‚Üí ùïä
      showS ss_frac  =
        formatToString (fixed $ fromMaybe 0 prec) ss_frac ‚óá colon 's'

      show2s ‚à∑ RatioN ‚Üí ùïä
      show2s ss_frac = p0_10 ss_frac ‚óá showS ss_frac

      showHMSp ‚à∑ (‚Ñï,‚Ñï,‚Ñï,RatioN) ‚Üí ùïä
      showHMSp (h',m',s',p') | h' > 0 = —é [ show_ h' 'h', show2 m' 'm'
                                          , show2s ((s'√∑ 1) + p')]
                             | m' > 0 = —é [ show_ m' 'm', show2s ((s'√∑ 1) + p') ]
                             | otherwise = showS ((s'√∑ 1) + p')
  in Text.pack (showHMSp (hh,mm,ss,part))

fmtTime ‚à∑ (Show Œ±, Real Œ±) ‚áí Modifier ‚Üí ùïÑ ‚Ñï ‚Üí Format r (Œ± ‚Üí r)
fmtTime mod_ prec = later $ LazyBuilder.fromText ‚àò fmtTime_ mod_ prec

----------------------------------------

{- | Parser for the fill spec of a conversion (the -07 of "%-07.4s", for
     example). -}
fill ‚à∑ CharParsing Œ∑ ‚áí Œ∑ (‚Ñ§, ‚ÑÇ)
fill = (\ a b c d ‚Üí (read (concat [a,[c],d]), b)) ‚ä≥ option "" (string "-")
                                                  ‚äµ option ' ' (char '0')
                                                  ‚äµ oneOf "123456789"
                                                  ‚äµ many digit

----------------------------------------

-- | parse for the precision part of a conversion (.2 of "%3.2f", for example)

precision ‚à∑ CharParsing Œ∑ ‚áí Œ∑ ‚Ñï
precision = read ‚ä≥ (char '.' ‚ã´ many digit)

----------------------------------------

{- | whether to format a bytes value in terms of powers of 10^3, or 2^10 -}
data ByteFmtBase = B_1000 | B_1024 deriving (Eq)

-- | try really hard to fit within 7 chars
formatBytes ‚à∑ (Formatters.Buildable a, Integral a) ‚áí ByteFmtBase ‚Üí a ‚Üí ùïã
formatBytes _ (toInteger ‚Üí 0) = "0"
formatBytes b bs =
    case b of
      B_1000 ‚Üí go 1000 bs -- (byteSize bs)
      B_1024 ‚Üí go 1024 bs -- (fromIntegral $ byteSize bs)
    where go ‚à∑ (Formatters.Buildable b, Integral b) ‚áí Double ‚Üí b ‚Üí ùïã
          go x bytes =
            let ex ‚à∑ Word8 = floor (logBase x $ fromIntegral bytes)
                (pfx,exp) ‚à∑ (ùïÑ ‚ÑÇ, Word8)= case ex of
                              0 ‚Üí (ùïπ,  0)
                              1 ‚Üí (ùïµ 'k', 1)
                              2 ‚Üí (ùïµ 'M', 2)
                              3 ‚Üí (ùïµ 'G', 3)
                              4 ‚Üí (ùïµ 'T', 4)
                              5 ‚Üí (ùïµ 'P', 5)
                              6 ‚Üí (ùïµ 'E', 6)
                              7 ‚Üí (ùïµ 'Z', 7)
                              _ ‚Üí (ùïµ 'Y', 8)
                formatB n = fixed n % Formatters.char % Formatters.string % "B"
                i = if b ‚â° B_1024 then "i" else ""
             in case pfx of
                 ùïπ ‚Üí sformat (int % "B") bytes
                 ùïµ c  ‚Üí let mant = fromIntegral bytes / (x^exp)
                            c_   = if b ‚â° B_1024 then toUpper c else c
                        in if mant < 10
                           then -- [fmt|%3.2f%T%sB|]
                                sformat (formatB 2) mant c_ i
                           else if mant < 100
                                then -- [fmt|%4.1f%T%sB|]
                                     sformat (formatB 1) mant (toUpper c) i
                                else -- [fmt|%4f%T%sB|]
                                     sformat (formatB 0) mant (toUpper c) i

----------------------------------------

class ToUTCTimeY Œ± where
  toUTCTimeY ‚à∑ Œ± ‚Üí ùïÑ UTCTime

instance ToUTCTimeY UTCTime where
  toUTCTimeY = ùïµ

instance ToUTCTimeY (ùïÑ UTCTime) where
  toUTCTimeY = id

{- | Format a (Maybe UTCTime), in almost-ISO8601-without-fractional-seconds
     (always in Zulu). -}
formatUTCY ‚à∑ ToUTCTimeY Œ± ‚áí Œ± ‚Üí ùïã
formatUTCY mt = case toUTCTimeY mt of
                  ùïµ t ‚Üí pack $ formatTime defaultTimeLocale "%FZ%T" t
                  ùïπ   ‚Üí "-------------------"

{- | Format a (Maybe UTCTime), in ISO8601-without-fractional-seconds (always in
     Zulu), with a leading 3-letter day-of-week. -}
formatUTCYDoW ‚à∑ ToUTCTimeY Œ± ‚áí Œ± ‚Üí ùïã
formatUTCYDoW mt = case toUTCTimeY mt of
                     ùïµ t ‚Üí pack $ formatTime defaultTimeLocale "%FZ%T %a" t
                     ùïπ   ‚Üí "-----------------------"

toFormatUTC ‚à∑ ToUTCTimeY Œ± ‚áí Format œÅ (Œ± ‚Üí œÅ)
toFormatUTC = later $ LazyBuilder.fromText ‚àò formatUTCY

toFormatUTCDoW ‚à∑ ToUTCTimeY Œ± ‚áí Format œÅ (Œ± ‚Üí œÅ)
toFormatUTCDoW = later $ LazyBuilder.fromText ‚àò formatUTCYDoW

----------------------------------------

renderStackLine ‚à∑ (ùïä,SrcLoc) ‚Üí ùïä
renderStackLine (fname,loc) = let to x y = x ‚óá "‚Üí" ‚óá y
                                  toS x y = to (show x) (show y)
                                  col l c = l ‚óá "[" ‚óá c ‚óá "]"
                                  colS l c = col (show l) (show c)
                                  pkg = srcLocPackage   loc
                                  mdl = srcLocModule    loc
                                  fn  = srcLocFile      loc
                                  sc  = srcLocStartCol  loc
                                  sl  = srcLocStartLine loc
                                  ec  = srcLocEndCol    loc
                                  el  = srcLocEndLine   loc
                                  st  = colS sl sc
                                  ed  = colS el ec
                                  src = —é [ pkg, ":", mdl, ":" ‚óá fn ]
                                  lc = if sl ‚â° el
                                       then —é [ col (show sl) (sc `toS` ec) ]
                                       else st `to` ed
                               in —é [ "¬´", fname, "¬ª", " (", src, "#", lc, ")" ]

----------------------------------------

formatStackHead ‚à∑ HasCallstack Œ± ‚áí Œ± ‚Üí ùïä
formatStackHead a = case getCallStack (a ‚ä£ callstack) of
                      []      ‚Üí "¬´NO STACK¬ª"
                      (loc:_) ‚Üí renderStackLine loc

toFormatStackHead ‚à∑ HasCallstack Œ± ‚áí Format œÅ (Œ± ‚Üí œÅ)
toFormatStackHead = later $ LazyBuilder.fromString ‚àò formatStackHead

----------------------------------------

formatCallStack ‚à∑ HasCallstack Œ± ‚áí Œ± ‚Üí ùïä
formatCallStack (getCallStack ‚àò view callstack ‚Üí ss) =
  case ss of
    [] ‚Üí "¬´NO STACK¬ª"
    _  ‚Üí intercalate "\n" $ renderStackLine ‚ä≥ ss

toFormatCallStack ‚à∑ HasCallstack Œ± ‚áí Format œÅ (Œ± ‚Üí œÅ)
toFormatCallStack = later $ LazyBuilder.fromString ‚àò formatCallStack

----------------------------------------

-- | parse a fmt, return an ExpQ that when spliced, takes arguments to pass
--   to the formatter to provide a textlike thing (see `FormatTarget`)
sprintf ‚à∑ ùïã ‚Üí ExpQ
sprintf = sprintf_ 'output

-- | like `sprintf`, but always produces a String (to reduce scoped type
--   variables)
sprintfS ‚à∑ ùïã ‚Üí ExpQ
sprintfS = sprintf_ 'formatToString

sprintfT ‚à∑ ùïã ‚Üí ExpQ
sprintfT = sprintf_ 'sformat

sprintfL ‚à∑ ùïã ‚Üí ExpQ
sprintfL = sprintf_ 'format

sprintf_ ‚à∑ Name ‚Üí ùïã ‚Üí ExpQ
sprintf_ fnam t =
  case tokens t of
    Failure e    ‚Üí error $ show e
    Success toks ‚Üí appE (varE fnam) $ foldr conjoin emptyStr (fmap tokOp toks)
                   where conjoin  = infixOp '(%)
                         emptyStr = litE $ stringL ""

{- | Implement a token.  Regular strings pass through; conversions ("%‚Ä¶") are
     implemented, and padded as necessary.
     Conversion token as formatter; e.g., %-3t ‚áí (left 3 ' ') %. stext
 -}
tokOp ‚à∑ Token ‚Üí ExpQ
-- literal string
tokOp (Str s) = litE $ stringL s
-- conversion, no padding
tokOp (Conversion mdl   -- ^ ‚à∑ Modifier - MOD_COMMIFY | MOD_NONE,
                        --                e.g., MOD_COMMIFY in %,9d
                  fill_ -- ^ ‚à∑ (ùïÑ(‚Ñ§,‚ÑÇ)) - fill width & char, e.g., (3,'0') in
                        --                %03.2f
                  prec  -- ^ ‚à∑ ùïÑ ‚Ñï      - precision, e.g., 2 in %3.2f
                  txt   -- ^ ‚à∑ ùïÑ¬†ùïã      - string option, e.g., "xx" in %3{xx}f
                  convc -- ^ ‚à∑ ‚ÑÇ        - conversion char, e.g., 'f' in %3f
      ) =

  let CharOp op = Map.findWithDefault badconv convc charOps
                  where badconv = error $ "bad conversion char '" ‚óá [convc] ‚óá"'"
      t = op convc mdl (fst ‚ä≥ fill_) prec txt
      (w,f) = fromMaybe (0,'!') fill_
  in
    if mdl ‚àà [MOD_NONE,MOD_COLON] ‚à® convc ‚àà "dfnxboe"
    then infixOp '(%.) (fillOp (w,f,mdl)) t
    else error $ "commafication not available with conv '" ‚óá [convc] ‚óá"'"

----------------------------------------

{- create a fill expression for simple left/right fills (no commafication) -}
fillIt ‚à∑ Name ‚Üí ‚Ñï ‚Üí ‚ÑÇ ‚Üí ExpQ
fillIt direction width c =
--  appE (appE (varE direction) (litE (integerL width))) (litE $ charL c)
  appE (appE (varE direction) (appE (varE 'fromInteger) [| width|])) (litE $ charL c)

fillIt' ‚à∑ Name ‚Üí ‚Ñï ‚Üí ‚ÑÇ ‚Üí ExpQ
fillIt' f n c =
  appE (varE 'buildLTFormatter)
--       (appE (appE (varE f) (litE $ charL c)) (litE (integerL n)))
       (appE (appE (varE f) (litE $ charL c)) (appE (varE 'fromInteger) [| n|]))

{- | Transform a `LT` transformer to a `Builder`. -}
buildLTTrans ‚à∑ Buildable œÅ ‚áí
               (LT.Text ‚Üí LT.Text) ‚Üí œÅ ‚Üí LazyBuilder.Builder
buildLTTrans f =
  LazyBuilder.fromLazyText ‚àò f ‚àò LazyBuilder.toLazyText ‚àò Buildable.build

buildLTFormatter ‚à∑ Buildable œÅ ‚áí
                   (LT.Text ‚Üí LT.Text) ‚Üí Format Œ± (œÅ ‚Üí Œ±)
buildLTFormatter = later ‚àò buildLTTrans

{- | Apply a text transformation to each line of a piece of text. -}
eachLine ‚à∑ Buildable œÅ ‚áí (LT.Text ‚Üí LT.Text) ‚Üí Format Œ± (œÅ ‚Üí Œ±)
eachLine f =
  -- we split & intercalate rather than lines/unlines, because the latter is
  -- lossy where the last "line" does or does not end in a newline
  buildLTFormatter $ LT.intercalate "\n" ‚àò fmap f ‚àò LT.split (‚â°'\n')

{- | Pad out each line to (to the left) a given width with a given character. -}
lefts ‚à∑ Buildable œÅ ‚áí ‚Ñï ‚Üí ‚ÑÇ ‚Üí Format Œ± (œÅ ‚Üí Œ±)
lefts k c = eachLine (LT.justifyRight (fromIntegral k) c)

{-| This will only work with numbers‚Ä¶ -}
commify ‚à∑ ‚ÑÇ ‚Üí ‚Ñ§ ‚Üí LT.Text ‚Üí LT.Text
commify c i t =
  let len = fromIntegral ‚àò LT.length
  in  case LT.breakOn "e" t of
        (_,"") ‚Üí -- no scientific notation
                 case LT.breakOn "." t of
                   (_,"") ‚Üí -- pure integer
                            commifyL c i t
                   (l,r)  ‚Üí -- has decimal point
                            let r' = commifyR c 0 (LT.tail r)
                            in  commifyL c (max 0 $ i - len r' - 1) l ‚óá "." ‚óá r'
        (m,e) ‚Üí -- scientific notation
                let e' = commifyL '¬°' {-^ pad shouldn't matter -} 0 (LT.tail e)
                    m' = commify c (max 0 $ i - len e' - 1) m
                 in m' ‚óá "e" ‚óá e'

{-| Insert a comma inbetween every three digits, from the right.
    If `i` is non-zero, the result will have `c`s added to ensure the minimum
    width.  If 'c' ‚â° '0', and i > 0, that padding will be subject to
    commification. Note that the final pad group may have four '0's, to avoid
    leading with a comma.
-}
commifyL ‚à∑ ‚ÑÇ ‚Üí ‚Ñ§ ‚Üí LT.Text ‚Üí LT.Text
commifyL c i t =
  let
    t' = -- t, commified (from the right, working left; as is standard with
         -- integers)
         LT.intercalate "," $ LT.reverse ‚ä≥ reverse(LT.chunksOf 3 $ LT.reverse t)
    i' = fromIntegral i
  in
    if c ‚â° '0' ‚àß i > 0
    then if fromIntegral (LT.length t') < i
         then let c'  = LT.singleton c
                  c'' = LT.replicate 3 c'
                  s   = if c ‚â° ' ' then " " else ","
                  p   = LT.takeWhile isDigit t'
                  p'  = s ‚óá LT.replicate (3-LT.length p) c'
                  t'' = LT.takeEnd i' $ LT.replicate i' (s ‚óá c'') ‚óá p' ‚óá t'
              in  if ',' ‚â° LT.head t''
                  then c' ‚óá LT.tail t''
                  else t''
         else t'
    else if i < 0
         then LT.justifyLeft  i' c t'
         else LT.justifyRight i' c t'

{-| Rightwards commify, for use after a decimal point. -}
commifyR ‚à∑ ‚ÑÇ ‚Üí ‚Ñï ‚Üí LT.Text ‚Üí LT.Text
commifyR c {-^ pad character -} i {-^ expected output width, incl. commas -} t =
  let
    t' = LT.intercalate "," (LT.chunksOf 3 t)
    tke = LT.take ‚àò fromIntegral
    replicat = LT.replicate ‚àò fromIntegral
  in
    if fromIntegral (LT.length t') < i
    then let c'  = LT.singleton c
             c'' = LT.replicate 3 c'
             s   = if c ‚â° ' ' then " " else ","
             p   = LT.takeWhileEnd isDigit t'
             p'  = LT.replicate (3-LT.length p) c' ‚óá s
             t'' = tke i $ t' ‚óá p' ‚óá replicat i c''
         in  if ',' ‚â° LT.last t''
             then LT.init t'' ‚óá c'
             else t''
    else t'

{- | Pad out each line to (to the right) a given width with a given character.-}
rights ‚à∑ Buildable œÅ ‚áí ‚Ñï ‚Üí ‚ÑÇ ‚Üí Format Œ± (œÅ ‚Üí Œ±)
rights k c = eachLine (LT.justifyLeft (fromIntegral k) c)

-- | conversion fill; -x ‚Üí left, (+)x ‚Üí right

fillOp ‚à∑ (‚Ñ§,‚ÑÇ,Modifier) ‚Üí ExpQ
fillOp (i,c,m) =
  if m ‚â° MOD_COMMIFY
  then fillIt' 'commify (abs i) c
  else
    if i < 0
    then fillIt 'rights (abs i) c
    else fillIt 'lefts  (fromInteger     i)  c

----------------------------------------

toTextF ‚à∑ Printable t ‚áí Format r (t ‚Üí r)
toTextF = later $ LazyBuilder.fromText ‚àò toText

toTextListF ‚à∑ (Foldable f, Printable t) ‚áí Format r (f t ‚Üí r)
toTextListF =
  later $ LazyBuilder.fromText ‚àò Text.intercalate "," ‚àò fmap toText ‚àò toList

----------------------------------------

toShell ‚à∑ Printable t ‚áí Format r (t ‚Üí r)
toShell = later $ LazyBuilder.fromString ‚àò translate ‚àò toString

toShellList ‚à∑ (Foldable f, Printable t) ‚áí Format r (f t ‚Üí r)
toShellList =
  let quote = toText ‚àò translate ‚àò toString
   in later $ LazyBuilder.fromText ‚àò Text.intercalate " " ‚àò fmap quote ‚àò toList

----------------------------------------

toFormatBytes ‚à∑ (Formatters.Buildable a, Integral a) ‚áí
                ByteFmtBase ‚Üí Format r (a ‚Üí r)
toFormatBytes b = later $ LazyBuilder.fromText ‚àò formatBytes b

----------------------------------------

{- $formatting

   Each specfier may be preceded by an integer value to specify padding and
   justification.  A positive integer pads to the left (thus, justifies to the
   right; and a negative integer pads to the right (thus, justifies to the
   left).

   >>> [fmtT|[%3s]|] "a"
   "[  a]"

   >>> [fmtT|[%-3s]|] "a"
   "[a  ]"

   Some numeric specificiers may have a ',' preceding the pad (if any), to cause
   the number to have a comma inserted every three digits.  If there is a
   positive pad value, and the pad character is '0', then that is also subject
   to commification.  In this instance, the first four characters may be a '0' -
   we elide the comma there, to ensure that the first character is not itself
   a comma.

   Where noted below, some specifiers also allow a precision (after a 'decimal
   point').

   [@L@] - A `Foldable` of things, where the things are instances of
           `Printable`, joined with ',', thus
           @ (`Foldable` œÜ, Printable œÑ) ‚áí œÜ intercalate "," (fmap toText œÑ) @

   [@l@] - LazyText `LT.Text`

   [@s@] - `String`

   [@t@] - StrictText `Text`

   [@T@] - `Printable` @ œÑ ‚áí toText œÑ @

   [@w@] - `Show` @ œâ ‚áí show œâ @

   [@d@] - `Integral` Œ± ‚áí render as denary

   [@n@] - `ToNum` Œ±    ‚áí render as denary

   [@x@] - `Integral` Œ± ‚áí render as hexadenary

   [@b@] - `Integral` Œ± ‚áí render as binary

   [@o@] - `Integral` Œ± ‚áí render as octal

   [@f@] - `Real` Œ± ‚áí Render as decimal with as many decimal places as
                       necessary.  Beware floating-point representation which
                       may give lengthy results.

   [@f.n@] - `Real` Œ± ‚áí Render as decimal with precisely /n/ decimal places.
                        Will round to the nearest decimal place as appropriate.

   [@e@] - `Real` Œ± ‚áí Render as decimal in scientific notation with 0 decimal
                       places in the mantissa.

                       >>> [fmtT|[%-e]|] (3.14 ‚à∑ Float)
                       "[3e0]"

                       Note that the padding width, if provided, applies to the
                       whole representation; thus the below adds one space
                       because "3e-1" is 4 characters.

                       >>> [fmtT|[%5e]|] (0.314 ‚à∑ Float)
                       "[ 3e-1]"


   [@e.n@] - `Real` Œ± ‚áí Render as decimal in scientific notation with precisely
                         /n/ decimal places in the mantissa.

                         >>> [fmtT|[%-.1e]|] (0.314 ‚à∑ Float)
                         "[3.1e-1]"

   [@y@] - `Integral` Œ± ‚áí Render as bytes, with a 10^3 multiplier.  This tries
                           to fit the value into 7 characters.

                           >>> [fmtT|%y|] (1024^(2‚à∑Int) ‚à∑ Integer)
                           "1.05MB"

                           >>> [fmtT|%y|] (1024 ‚à∑ Integer)
                           "1.02kB"

                           >>> [fmtT|%y|] (999 ‚à∑ Integer)
                           "999B"


   [@Y@] - `Integral` Œ± ‚áí Render as bytes, with a 2^10 multiplier.  This tries
                           to fit the value into 7 characters.

                           >>> [fmtT|%Y|] (999 ‚à∑ Integer)
                           "999B"

                           >>> [fmtT|%Y|] (1024*1023 ‚à∑ Integer)
                           "1023KiB"

                           >>> [fmtT|%Y|] (1024*1024 ‚à∑ Integer)
                           "1.00MiB"

   [@z@] - `UTCTime` Œ± or `Maybe UTCTime` Œ± ‚áí Render as UTCTime, in the form
                                              "YYYY-MM-DDZhh:mm:ss".
                           >>> getCurrentTime >>= return . [fmtT|%z|]
                           "2020-04-20Z05:58:47"

   [@Z@] - `UTCTime` Œ± or `Maybe UTCTime` Œ± ‚áí Render as UTCTime, in the form
                                              "YYYY-MM-DDZhh:mm:ss www" where
                                              www is three-letter day-of-week.
                           >>> getCurrentTime >>= return . [fmtT|%Z|]
                           "2020-04-20Z05:58:47 Mon"

   [@k@] - `ToCallStack` Œ± ‚áí Render the top line of a callstack.

   [@K@] - `ToCallStack` Œ± ‚áí Render a callstack *as multiple lines*.  Note
                             that the behaviour of basic numeric fills with
                             multiple lines is undefined; you might want to use
                             a `{‚Ä¶}` clause here to provide indenting.

   [@q@] - `Printable` @ œÑ ‚áí `translate` t @; shell-quote string.
   [@Q@] - A `Foldable` of things, where the things are instances of
           `Printable`, which are shell-quoted like @q@, and joined with ' '.

   [@m@] - `Real` Œ±    ‚áí render as a timespan; e.g., 1s
-}

{- | Character op: non-ùïπ precision causes error. -}
charOpNoPrecision ‚à∑ ExpQ ‚Üí ‚ÑÇ ‚Üí ùïÑ ‚Ñï ‚Üí ùïÑ ùïã ‚Üí ExpQ
charOpNoPrecision f _ ùïπ ùïπ = f
charOpNoPrecision _ chr (ùïµ prec) ùïπ =
  error $ —é [ "conversion char '", [chr], "' does not admit precision ("
            , show prec, ")" ]
charOpNoPrecision _ chr ùïπ (ùïµ t) =
  error $ —é [ "conversion char '", [chr], "' admits no text ({", unpack t,"})" ]
charOpNoPrecision _ chr (ùïµ prec) (ùïµ t) =
  error $ —é [ "conversion char '", [chr], "' admits neither precision ("
            , show prec, ")", " nor text ({", unpack t
            , "})" ]

------------------------------------------------------------

-- second tuple member is whether commafication is supported
-- function args:
--   ) conversion character
--   ) modifier (Commify, or None)
--   ) fill width
--   ) precision, e.g., 2 in %3.2f
--   ) string option, e.g., "xx" in %3{xx}f
newtype CharOp = CharOp (‚ÑÇ -> Modifier -> (ùïÑ ‚Ñ§) -> (ùïÑ ‚Ñï) -> (ùïÑ ùïã) -> ExpQ)

----------------------------------------

{- | Conversion character as formatter; e.g., 't' ‚Üí stext; takes fill width &
     precision too, lest that affect the conversion. -}
charOps ‚à∑ Map.Map ‚ÑÇ CharOp
charOps = Map.fromList $
  let
    no_prec f = CharOp $ \ c _ _ p t ‚Üí charOpNoPrecision f c p t
    e_no_text c t = error $ "conversion char '" ‚óá [c] ‚óá "' "
                          ‚óá "admits no text ({" ‚óá unpack t ‚óá "})"
  in
    [ -- list (foldable), joined with ','
      ('L', no_prec ‚ü¶ toTextListF ‚üß)
      -- lazy text
    , ('l', no_prec ‚ü¶ text ‚üß)
    , ('s', no_prec ‚ü¶ Formatters.string ‚üß)
    , ('t', no_prec ‚ü¶ stext ‚üß)
    , ('T', no_prec ‚ü¶ toTextF ‚üß)
    , ('q', no_prec ‚ü¶ toShell ‚üß)
    , ('w', no_prec ‚ü¶ shown ‚üß)

      -- list (foldable) of shell-quoted things, joined with ' '
    , ('Q', no_prec ‚ü¶ toShellList ‚üß)

    , ('d', no_prec ‚ü¶ int ‚üß)
    , ('x', no_prec ‚ü¶ hex ‚üß)
    , ('b', no_prec ‚ü¶ bin ‚üß)
    , ('o', no_prec ‚ü¶ oct ‚üß)
    , ('n', no_prec ‚ü¶ tonum ‚üß)

    , let char_op _ _ _ ùïπ     ùïπ     = ‚ü¶ floatmin ‚üß
          char_op _ _ _ (ùïµ i) ùïπ     = ‚ü¶ fixed i ‚üß
          char_op c _ _ _     (ùïµ t) = e_no_text c t
      in  ('f', CharOp char_op)
    , let char_op _ _ _ ùïπ     ùïπ     = ‚ü¶ expt 0 ‚üß
          char_op _ _ _ (ùïµ i) ùïπ     = ‚ü¶ expt i ‚üß
          char_op c _ _ _     (ùïµ t) = e_no_text c t
      in  ('e', CharOp char_op)

    , ('y', no_prec ‚ü¶ toFormatBytes B_1000 ‚üß)
    , ('Y', no_prec ‚ü¶ toFormatBytes B_1024 ‚üß)

    , ('z', no_prec ‚ü¶ toFormatUTC ‚üß)
    , ('Z', no_prec ‚ü¶ toFormatUTCDoW ‚üß)

    , ('k', no_prec ‚ü¶ toFormatStackHead ‚üß)
    , ('K', no_prec ‚ü¶ toFormatCallStack ‚üß)

    , let char_op _ m _ p _ = [| fmtTime m p |] in ('m',CharOp char_op)
    ]

----------------------------------------

floatmin ‚à∑ Real Œ± ‚áí Format r (Œ± ‚Üí r)
floatmin = let dropper = dropWhileEnd (`elem` (".0" ‚à∑ ùïä))
            in later $ LazyBuilder.fromText ‚àò dropper ‚àò sformat shortest

----------------------------------------

tonum ‚à∑ ToNum Œ± ‚áí Format r (Œ± ‚Üí r)
tonum = mapf toNumI int

----------------------------------------

expt ‚à∑  RealFloat Œ± ‚áí ‚Ñï ‚Üí Format r (Œ± ‚Üí r)
expt n = later (\ f ‚Üí
  let (m,e ‚à∑ ‚Ñ§) = decompose f
   in LazyBuilder.fromText $ (sformat $ (fixed n % "e" % int)) m e)

----------------------------------------

-- | decompose a Real value into "engineering" notation; a mantissa between
--   (-10,10) and an exponent, as a power of 10
decompose ‚à∑ (RealFloat Œ±, Integral Œ≤) ‚áí Œ± ‚Üí (Double, Œ≤)
decompose val = let (mant2,ex2) = decodeFloat val
                    mant2d ‚à∑ Double = fromIntegral(abs mant2)
                    ex2d   ‚à∑ Double = fromIntegral ex2
                    res    ‚à∑ Double = log10 mant2d + log10 (2**ex2d)
                    ex10             = floor res
                    log10  ‚à∑ Double ‚Üí Double = logBase 10
                    mant10 ‚à∑ Double = 10**(res - (fromIntegral ex10‚à∑Double))
                 in if mant2 > 0
                    then (mant10,ex10)
                    else (-mant10,ex10)

----------------------------------------

-- | infix a function between two values
infixOp ‚à∑ Name ‚Üí ExpQ ‚Üí ExpQ ‚Üí ExpQ
infixOp op l r = infixE (ùïµ l) (varE op) (ùïµ r)

----------------------------------------

-- | Generate an instance of FormatTarget (e.g., Strict or Lazy Text, or String)
--   from a format and set of values.
--
--   >>> ([fmt|foo %s|] ("baz" ‚à∑ String)) ‚à∑ Text
--   "foo baz"
--
--   >>> :t [fmtS|bar %t|] ("quux" ‚à∑ Text)
--   [fmtS|bar %t|] ("quux" ‚à∑ Text) ‚à∑ [Char]
--
--   >>> [fmtS|bar %t|] ("quux" ‚à∑ Text)
--  "bar quux"

fmt ‚à∑ QuasiQuoter
fmt =  QuasiQuoter { quoteDec  = error "not implemented"
                   , quoteType = error "not implemented"
                   , quotePat  = error "not implemented"
                   , quoteExp  = sprintf ‚àò pack
                   }

--------------------

-- | like `fmt`, but produces specifically a String
fmtS ‚à∑ QuasiQuoter
fmtS =  QuasiQuoter { quoteDec  = error "not implemented"
                    , quoteType = error "not implemented"
                    , quotePat  = error "not implemented"
                    , quoteExp  = sprintfS ‚àò pack
                    }

--------------------

-- | like `fmt`, but produces specifically a Lazy Text
fmtL ‚à∑ QuasiQuoter
fmtL =  QuasiQuoter { quoteDec  = error "not implemented"
                    , quoteType = error "not implemented"
                    , quotePat  = error "not implemented"
                    , quoteExp  = sprintfL ‚àò pack
                    }

--------------------

-- | like `fmt`, but produces specifically a Strict Text
fmtT ‚à∑ QuasiQuoter
fmtT =  QuasiQuoter { quoteDec  = error "not implemented"
                    , quoteType = error "not implemented"
                    , quotePat  = error "not implemented"
                    , quoteExp  = sprintfT ‚àò pack
                    }

------------------------------------------------------------

-- | possible target of `fmt` or similar.

class FormatTarget t where
  output ‚à∑ Format t a ‚Üí a

instance FormatTarget ùïã where
  output = sformat

instance FormatTarget LT.Text where
  output = format

instance FormatTarget ùïä where
  output = formatToString

------------------------------------------------------------

{- Given a list of lines, each being a list of columns; pad out the columns
   to provide an aligned display.

   The columns are padded out according to the input `pads` argument.  Widths
   are set according to the widest input column.  Columns for which no justify
   value is provided are left unmolested.
-}
data Justify = JustifyLeft | JustifyRight

-- provide fixed width args, and ignore args, and centrejustify args

columnify ‚à∑ [Justify] ‚Üí [[ùïã]] ‚Üí [[ùïã]]
columnify pads zs =
  let pad_t ‚à∑ ‚Ñ§ ‚Üí ùïã ‚Üí ùïã
      pad_t (unNegate ‚Üí (SignMinus,n)) t = replicate @ùïã (n ‚äñ length t) ' ' ‚óá t
      pad_t (unNegate ‚Üí (SignPlus, n)) t = t ‚óá replicate @ùïã (n ‚äñ length t) ' '

      col_widths = transpose zs & each ‚äß (\ ys ‚Üí maximumDef 0 $ length ‚ä≥ ys)
      xx JustifyLeft  = 1
      xx JustifyRight = (-1)
      col_widths' = (\(x,y) ‚Üí fromIntegral y * (xx  x)) ‚ä≥ zip pads col_widths
  in
    (^.. each) ‚àò (zipWith pad_t (col_widths' ‚óá repeat 0)) ‚ä≥ zs

-- that's all, folks! ---------------------------------------------------------
